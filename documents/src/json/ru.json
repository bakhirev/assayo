[
    {
        "p": "Создаёт HTML-отчёт с анализом статистики коммитов:"
    },
    {
        "li": [
            "текучка кадров и состав команд;",
            "местоположение разработчиков;",
            "график релизов и отпусков;",
            "темп работы и количество переработок;",
            "зоны ответственности, объем фичей и багов;",
            "стоимость фичей и проекта в целом;",
            "стиль работы коллег;",
            "места для рефакторинга, удалённые файлы и т.п."
        ]
    },
    {
        "p": "**Ссылки:** [демо](https://bakhirev.github.io/demo/?ref=github&dump=./test.txt), [online version](https://bakhirev.github.io/demo/?ref=github), [docker](https://hub.docker.com/r/bakhirev/assayo), [reddit](https://www.reddit.com/r/ITManagers/comments/1e5k291/the_visualization_and_analysis_of_git_commit/), [habr](https://habr.com/ru/articles/852782/)."
    },
    {
        "p": "**Видео:** [english](https://www.youtube.com/watch?v=uMbhrrd25t4), [español](https://www.youtube.com/watch?v=skmctb_2rZ0), [русский](https://www.youtube.com/watch?v=jwCp_-bhrCQ)."
    },
    {
        "h3": "Содержание"
    },
    {
        "h2": "ОТЧЁТ ПО СТАТИСТИКЕ КОММИТОВ"
    },
    {
        "h3": "Как создать и посмотреть отчёт?"
    },
    {
        "h4": "Через публичный сервер"
    },
    {
        "li": [
            "перейдите на [сайт](https://bakhirev.github.io/demo)",
            "следуйте инструкциям"
        ]
    },
    {
        "h4": "Используя библиотеку NodeJS"
    },
    {
        "li": [
            "выполнить `npx assayo`",
            "открыть `./assayo/index.html`"
        ]
    },
    {
        "h4": "Используя библиотеку PHP"
    },
    {
        "li": [
            "выполнить `composer require bakhirev/assayo`",
            "выполнить `vendor/bin/assayo`",
            "открыть `./assayo/index.html`"
        ]
    },
    {
        "h4": "Используя библиотеку Python"
    },
    {
        "li": [
            "выполнить `pipx install assayo`",
            "выполнить `assayo`",
            "открыть `./assayo/index.html`"
        ]
    },
    {
        "h4": "Используя библиотеку Ruby"
    },
    {
        "li": [
            "выполнить `gem install assayo`",
            "выполнить `assayo`",
            "открыть `./assayo/index.html`"
        ]
    },
    {
        "h4": "Используя библиотеку Go"
    },
    {
        "li": [
            "выполнить `go get github.com/bakhirev/assayo`",
            "выполнить `go install github.com/bakhirev/assayo`",
            "выполнить `assayo`",
            "открыть `./assayo/index.html`"
        ]
    },
    {
        "h4": "Без установки библиотек"
    },
    {
        "li": [
            "скачать этот репозиторий",
            "перетащить файл `log.txt` в папку `/build`",
            "запустить `/build/index.html`",
            "или перетащить папку `/build` к себе в репозиторий (туда, где лежит `log.txt`). Можно сменить название. Например с `/build` на `/report`"
        ]
    },
    {
        "p": "В этом случае важно, чтобы файл `log.txt` был сгенерирован командой для офлайн просмотра."
    },
    {
        "h4": "Через github actions"
    },
    {
        "p": "Добавьте [скрипт](https://github.com/bakhirev/assayo/blob/main/documents/ActionExample.yml) в папку `.github/workflows/` или используйте этот [action](https://github.com/marketplace/actions/assayo) из официального магазина. Готовый свежий отчёт по проекту будет лежать в артефактах."
    },
    {
        "h4": "С помощью приватного сервера"
    },
    {
        "li": [
            "скачайте [docker образ](https://hub.docker.com/r/bakhirev/assayo);",
            "поднимите его в локальной сети;",
            "для просмотра отчётов используйте веб-интерфейс указывая ему адресс, где лежат данные, в URL-параметре ```dump```:"
        ]
    },
    {
        "pre": [
            "http://assayo_url/?dump=//you_url/some/log.txt",
            "assayo_url - URL адресс контейнера assayo, он слушает 80 порт;",
            "you_url    - URL адресс вашего контейнера с логами git;"
        ]
    },
    {
        "p": "По умолчанию образ запустится по адресу ```http://127.0.0.1:80/```. Если не получилось проверьте свободен ли у вас 80 порт."
    },
    {
        "h3": "Как объединить авторов коммитов в отчёте?"
    },
    {
        "p": "В корневой директории вашего проекта нужно создать файл `.mailmap`."
    },
    {
        "p": "Пример содержания файла:"
    },
    {
        "pre": [
            "Alex B <alex@mail.uk>",
            "Alex B <alex@mail.uk> <alex@gov.tk>",
            "Alex B <alex@mail.uk> <bakhirev@ya.kz>",
            "Alex B <alex@mail.uk> <man64@yahoo.com>"
        ]
    },
    {
        "p": "Подробнее про формат этого файла можно прочитать [тут](https://git-scm.com/docs/gitmailmap)."
    },
    {
        "h3": "Как выгрузить данные из git в txt файл?"
    },
    {
        "h4": "Для онлайн просмотра"
    },
    {
        "p": "В корневой директории вашего проекта выполнить:"
    },
    {
        "pre": [
            "git --no-pager log --raw --numstat --oneline --all --reverse --date=iso-strict --pretty=format:\"%ad>%aN>%aE>%s\" > log.txt"
        ]
    },
    {
        "h4": "Для офлайн просмотра"
    },
    {
        "pre": [
            "git --no-pager log --raw --numstat --oneline --all --reverse --date=iso-strict --pretty=format:\"%ad>%aN>%aE>%s\" | sed -e 's/\\\\/\\\\\\\\/g' | sed -e 's/`/\"/g' | sed -e 's/\\$/S/g' | sed -e '1s/^/R(f\\`/' | sed -e '$s/$/\\`\\);/' > log.txt"
        ]
    },
    {
        "p": "Git создаст файл `log.txt`. Он содержит данные для построения отчёта. Разница между онлайн и офлайн форматом в наличие обёртки для строк. Оффлайн формат будет подтягиваться, как `js` файл если вы просто открыли `/build/index.html`"
    },
    {
        "h4": "Если вы используете PowerShell в Windows"
    },
    {
        "p": "По умолчанию, поток вывода не совпадает с UTF-8 и итоговый файл становится нечитаемым. Перед сохранением файла с логом вы можете изменить кодировку командой:"
    },
    {
        "pre": "[Console]::OutputEncoding = [System.Text.Encoding]::UTF8"
    },
    {
        "p": "Или откройте сохраненный файл и вручную измените кодировку на UTF-8."
    },
    {
        "h3": "Как посмотреть отчёт по группе микросервисов?"
    },
    {
        "li": [
            "Сгенерировать для каждого микросервиса файл `log.txt` (`log-1.txt`, `log-2.txt`, `log-3.txt` и т.д.). Вы можете сделать это в ручную, или использовать модуль [Assayo Crawler](https://github.com/bakhirev/assayo-crawler) для автоматического сбора логов;",
            "См. «Как посмотреть отчёт онлайн?». На последнем шаге перетащить сразу все файлы в окно браузера.",
            "См. «Как посмотреть отчёт офлайн?». На втором шаге перетащить все файлы микросервисов (`log-1.txt`, `log-2.txt`, `log-3.txt` и т.д.) в папку отчета (`/build`)."
        ]
    },
    {
        "h2": "ЕЖЕДНЕВНЫЕ ПРАКТИКИ В ПРОЕКТЕ"
    },
    {
        "h3": "Как подписывать коммиты?"
    },
    {
        "p": "Следуйте практике [Conventional Commits 1.0.0](https://www.conventionalcommits.org/en/v1.0.0/). Например:"
    },
    {
        "pre": [
            "JIRA-1234 feat(profile): Added avatar for user "
        ]
    },
    {
        "li": [
            "номер задачи в таск трекере `(JIRA-1234)`",
            "тип работы `(feat, fix, style, refactor, test, doc и т.д.)`",
            "фича `(profile - раздел сайта, страница или новый функционал, одним словом)`",
            "какую проблему решали `(Added avatar for user)`"
        ]
    },
    {
        "h3": "Как добавить автоматическую проверку подписи коммита?"
    },
    {
        "h4": "Используя файл `commit-msg`"
    },
    {
        "p": "1. Создайте файл `commit-msg` в папке `.git/hooks/`"
    },
    {
        "p": "2. Добавьте в файл следующий текст:"
    },
    {
        "pre": [
            "#!/usr/bin/env bash",
            "if ! grep -iqE \"(JIRA-[0-9]{1,5})(\\s)(feat|fix|docs|style|refactor|test|chore)((\\([a-z0-9_-]{1,}\\)){0,})(:\\s)([a-z]{1,})\" \"$1\"; then",
            "   echo \"Need commit message like: JIRA-12 fix(profile): some text. Read Semantic Commit Messages\" >&2",
            "   exit 1",
            "fi"
        ]
    },
    {
        "h4": "Используя пакет [pre-commit](https://www.npmjs.com/package/pre-commit)"
    },
    {
        "p": "1. Добавьте в файл `package.json` блок `commit-msg`:"
    },
    {
        "pre": [
            "  ...",
            "  \"commit-msg\": {",
            "    \"regex\": \"(JIRA-[0-9]{1,5})(\\\\s)(feat|fix|docs|style|refactor|test|chore)((\\\\([a-z0-9_-]{1,}\\\\)){0,})(:\\\\s)([a-z]{1,})\",",
            "    \"error-message\": \"Need commit message like: JIRA-12 fix(profile): some text Read Semantic Commit Messages\"",
            "  },",
            "  ..."
        ]
    },
    {
        "p": "2. Выполните команду `npm install pre-commit`"
    },
    {
        "h2": "ОБ ЭТОМ ПРИЛОЖЕНИИ"
    },
    {
        "h3": "Как брендировать отчёт?"
    },
    {
        "p": "Вы можете написать свою тему для отчёта. Можно менять:"
    },
    {
        "li": [
            "**Заголовок**. Вы можете указать его в URL-параметре ```title```. Например: ```?title=You Company```",
            "**Визуальную тему**. Для этого нужно подготовить CSS файл с новыми стилями и указать его адрес в URL-параметре ```theme```. Например: ```?theme=//company.com/some.css```. Вы можете использовать имена классов в качестве селекторов. Большинство из них не меняется в при выходе новой версий.",
            "**Язык**. Вы можете указать его в URL-параметре ```lang```. Например: ```?lang=es```"
        ]
    },
    {
        "p": "**Например:** [демо](https://bakhirev.github.io/demo/themes/)"
    },
    {
        "h3": "Как пересобрать файл отчёта из исходного кода?"
    },
    {
        "li": [
            "Скачать этот репозиторий",
            "Выполнить `npm install`",
            "Выполнить `npm run build:local`",
            "Свежая сборка будет в папке `/build`"
        ]
    },
    {
        "h3": "Как добавить или отредактировать перевод?"
    },
    {
        "p": "Вы можете добавить новый перевод или поправить текущий в разделе ```ts/translations/```."
    },
    {
        "p": "[Инструкция](https://github.com/firstcontributions/first-contributions)"
    },
    {
        "h3": "Архитектура"
    },
    {
        "h4": "Структура этого модуля"
    },
    {
        "pre": [
            "src",
            " |- pages",
            "    |- Person // all personal dashboards",
            "    |- Team   // all dashboards about team",
            " |",
            " |- helpers",
            "    |- Parser          // parse text from git log to JS objects",
            "    |- DataGrip        // data grouping and counting values",
            "    |- achievement     // the logic that gives out personal achievements",
            "    |- Recommendations // the logic that gives out common recommendations",
            " |",
            " |- translations // translations into other languages"
        ]
    },
    {
        "h4": "Общая архитектура микросервисов"
    },
    {
        "img": "<img src=\"https://raw.githubusercontent.com/bakhirev/assayo-crawler/12af4410fc93384cafb108a4429e43f9a874dbaa/schema.svg\" width=\"70%\" />"
    },
    {
        "p": "1. [Reports showcase UI](https://github.com/bakhirev/assayo-showcase) отображение списка отчётов. Каждый отчёт имеет название, описание и список репозиториев."
    },
    {
        "p": "2. [Crawler service](https://github.com/bakhirev/assayo-crawler) сборка, склейка, обработка логов из репозиториев для отчётов."
    },
    {
        "p": "3. [Log visualization UI](https://github.com/bakhirev/assayo) **(вы тут)** отображение отчётов. Для работы ему нужен log файл с данными."
    },
    {
        "h3": "Пожелания, предложения, замечания"
    },
    {
        "li": [
            "telegramm [@bakhirev](https://t.me/bakhirev) (приоритетный способ связи)",
            "[alexey-bakhirev@yandex.ru](mailto:alexey-bakhirev@yandex.ru)",
            "сайт [https://bakhirev.github.io/](https://bakhirev.github.io/?ref=github&lang=ru)"
        ]
    }
]
